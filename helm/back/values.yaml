# Default values for back.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# Application Configuration
config:
  # Server Configuration
  server:
    port: 3001
    nodeEnv: production
  
  # Database Configuration
  database:
    host: localhost  # Will be overridden if postgresql.enabled=true
    port: 5432
    name: arxentra
    user: arxentra-user
    password: "change_me_in_production"
    optimize: "false"
    
    # SSL/TLS Configuration
    ssl:
      enabled: false
      ca: ""
      cert: ""
      key: ""
  
  # JWT Configuration
  jwt:
    secret: "generate_with_crypto_randomBytes_64_hex_minimum_32_chars"
  
  # Session Configuration
  session:
    secret: "generate_with_crypto_randomBytes_64_hex_128_chars_minimumgenerate_with_crypto_randomBytes_64_hex_128_chars_minimum"
  
  # Frontend Configuration
  frontend:
    port: 3000
    skipPreflightCheck: "true"
  
  # CORS Configuration
  cors:
    # Comma-separated list of allowed origins
    # Default includes common local development URLs
    allowedOrigins: "http://localhost:3000,http://127.0.0.1:3000,https://arx-front.arxentra.com"
    # For production, update to your actual domains:
    # allowedOrigins: "https://arxentra.com,https://www.arxentra.com,https://arx-front.arxentra.com"
    allowCredentials: true
    allowMethods: "*"
    allowHeaders: "*"

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/arxentra/shuttle-zafrir-miluim
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "backend.20250903.3"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: ghcr-secret
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3001  # Backend API port

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization"
  hosts:
    - host: 3270354a-4ba5-4b87-8665-24c9279bb079.arxentra.app
      paths:
        - path: /
          pathType: Prefix
  tls: []
    # - secretName: arxentra-api-tls
    #   hosts:
    #     - arx-test.arxentra.com

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /api/health
#     port: http
#   initialDelaySeconds: 30
#   periodSeconds: 10
# readinessProbe:
#   httpGet:
#     path: /api/health
#     port: http
#   initialDelaySeconds: 5
#   periodSeconds: 5

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# PostgreSQL Configuration using PGO (Crunchy Data Operator)
postgresql:
  enabled: true
  version: 16
  
  # PostgreSQL Image Configuration
  # image:
  #   repository: registry.developers.crunchydata.com/crunchydata/crunchy-postgres
  #   tag: ubi8-15.8-1
  
  # Instance Configuration
  instances:
    replicas: 1
    
    # Resource Configuration
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    
    # Storage Configuration
    storage:
      size: "20Gi"
      storageClass: "iscsi-qos-retain"  # Use default storage class
    
    # Node placement
    affinity: {}
    nodeSelector: {}
    tolerations: []
  
  # Backup Configuration
  backup:
    enabled: false
    
    # Backup Image Configuration
    # image:
    #   repository: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest
    #   tag: ubi8-2.51-1
    
    # Backup Storage (local volume or S3)
    storage:
      size: "50Gi"
      storageClass: ""  # Use default storage class
    
    # S3 Backup Configuration (optional)
    s3:
      enabled: false
      bucket: ""
      endpoint: ""
      region: ""
    
    # Backup Schedule (cron format)
    schedule: "0 2 * * *"  # Daily at 2 AM
  
  # Monitoring Configuration
  monitoring:
    enabled: false
    
    # Prometheus Exporter Configuration
    exporter:
      # image:
      #   repository: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-exporter
      #   tag: ubi8-5.4.1-1
      
      resources:
        requests:
          memory: "64Mi"
          cpu: "50m"
        limits:
          memory: "128Mi"
          cpu: "100m"
  
  # Custom PostgreSQL Configuration Parameters
  customConfig: 
    max_connections: "200"
    shared_buffers: "128MB"
    effective_cache_size: "512MB"
    maintenance_work_mem: "64MB"
    checkpoint_completion_target: "0.9"
    wal_buffers: "16MB"
    default_statistics_target: "100"
    random_page_cost: "1.1"
    effective_io_concurrency: "200"
    postgresql:
      pg_hba:
        - "hostnossl all all all md5"
