version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tzafrir-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: tzafrir_shuttle
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - tzafrir-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: tzafrir-backend
    restart: always
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/tzafrir_shuttle
      JWT_SECRET: your-jwt-secret-here-change-in-production
      CORS_ORIGIN: http://localhost:5173
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - tzafrir-network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3001}
    container_name: tzafrir-frontend
    restart: always
    environment:
      - NODE_ENV=development
    ports:
      - "5173:8080"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - tzafrir-network
    command: npm run dev

networks:
  tzafrir-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local