services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tzafrir-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: tzafrir_shuttle
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - tzafrir-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for OpenTelemetry tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: tzafrir-jaeger
    restart: always
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - tzafrir-network

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: tzafrir-backend
    restart: always
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/tzafrir_shuttle
      JWT_SECRET: your-jwt-secret-here-change-in-production
      CORS_ORIGIN: "*"
      # OpenTelemetry Configuration
      OTEL_SERVICE_NAME: tzafrir-shuttle-api
      OTEL_SERVICE_VERSION: 1.0.0
      ENABLE_JAEGER: true
      ENABLE_OTLP: false
      ENABLE_CONSOLE_EXPORT: true
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      # Logging Configuration
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
    volumes:
      - ./backend:/app
      - ./backend/requirements.txt:/app/requirements.txt
    networks:
      - tzafrir-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001}
    container_name: tzafrir-frontend
    restart: always
    environment:
      - NODE_ENV=production
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - tzafrir-network

networks:
  tzafrir-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local